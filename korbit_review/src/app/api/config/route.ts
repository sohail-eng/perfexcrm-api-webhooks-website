import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

// API endpoint to save configuration
export async function POST(request: NextRequest) {
  try {
    const config = await request.json();
    
    // Generate .env content
    const envContent = `# Generated by PerfexAPI Setup Wizard
# ${new Date().toISOString()}

# Base Configuration
NEXT_PUBLIC_BASE_URL=${config.baseUrl || 'http://localhost:3000'}
NEXT_PUBLIC_TEST_MODE=${config.testMode || true}

# Stripe Configuration
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${config.stripePublishableKey || ''}
STRIPE_SECRET_KEY=${config.stripeSecretKey || ''}
STRIPE_WEBHOOK_SECRET=${config.stripeWebhookSecret || ''}
NEXT_PUBLIC_STRIPE_REGULAR_PRICE_ID=${config.stripeRegularPriceId || ''}
NEXT_PUBLIC_STRIPE_EXTENDED_PRICE_ID=${config.stripeExtendedPriceId || ''}

# Admin Configuration
NEXT_PUBLIC_ADMIN_PASSWORD=${config.adminPassword || 'admin123'}

# Email Service
${config.emailService === 'sendgrid' ? `SENDGRID_API_KEY=${config.sendgridApiKey}` : '# SENDGRID_API_KEY='}
${config.emailService === 'resend' ? `RESEND_API_KEY=${config.resendApiKey}` : '# RESEND_API_KEY='}
EMAIL_FROM=${config.emailFrom || 'noreply@perfexapi.com'}

# Database
${config.databaseUrl ? `DATABASE_URL=${config.databaseUrl}` : '# DATABASE_URL='}

# Analytics
${config.googleAnalytics ? `NEXT_PUBLIC_GOOGLE_ANALYTICS=${config.googleAnalytics}` : '# NEXT_PUBLIC_GOOGLE_ANALYTICS='}
${config.plausibleDomain ? `NEXT_PUBLIC_PLAUSIBLE_DOMAIN=${config.plausibleDomain}` : '# NEXT_PUBLIC_PLAUSIBLE_DOMAIN='}

# PerfexCRM Integration
${config.perfexcrmUrl ? `PERFEXCRM_URL=${config.perfexcrmUrl}` : '# PERFEXCRM_URL='}
${config.perfexcrmApiKey ? `PERFEXCRM_API_KEY=${config.perfexcrmApiKey}` : '# PERFEXCRM_API_KEY='}
`;

    // In development, save to project root
    if (process.env.NODE_ENV === 'development') {
      const envPath = path.join(process.cwd(), '.env.local');
      fs.writeFileSync(envPath, envContent);
      
      return NextResponse.json({ 
        success: true, 
        message: '.env.local file created successfully',
        path: envPath 
      });
    }

    // In production, return the content for download
    return new NextResponse(envContent, {
      status: 200,
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': 'attachment; filename=".env.local"',
      },
    });
    
  } catch (error: any) {
    console.error('Config save error:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to save configuration' },
      { status: 500 }
    );
  }
}

// Test Stripe connection
export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const action = searchParams.get('action');
  
  if (action === 'test-stripe') {
    const publishableKey = searchParams.get('pk');
    const secretKey = searchParams.get('sk');
    
    // Basic validation
    const results = {
      publishableKey: publishableKey?.startsWith('pk_') || false,
      secretKey: secretKey?.startsWith('sk_') || false,
      mode: publishableKey?.includes('test') ? 'test' : 'live',
    };
    
    // You could add actual Stripe API test here
    // const stripe = new Stripe(secretKey);
    // try {
    //   await stripe.products.list({ limit: 1 });
    //   results.connection = true;
    // } catch {
    //   results.connection = false;
    // }
    
    return NextResponse.json(results);
  }
  
  return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
}