'use client';

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Settings, Save, Check, AlertCircle, Eye, EyeOff, 
  CreditCard, Mail, Database, Shield, Globe, Copy,
  TestTube, Rocket, Info, Key, Webhook, DollarSign
} from 'lucide-react';

interface ConfigData {
  // Stripe
  stripePublishableKey: string;
  stripeSecretKey: string;
  stripeWebhookSecret: string;
  stripeRegularPriceId: string;
  stripeExtendedPriceId: string;
  
  // Admin
  adminPassword: string;
  
  // Email
  emailService: 'sendgrid' | 'resend' | 'none';
  sendgridApiKey: string;
  resendApiKey: string;
  emailFrom: string;
  
  // Database
  databaseType: 'postgres' | 'mysql' | 'sqlite' | 'none';
  databaseUrl: string;
  
  // Analytics
  googleAnalytics: string;
  plausibleDomain: string;
  
  // PerfexCRM
  perfexcrmUrl: string;
  perfexcrmApiKey: string;
}

export default function SetupPage() {
  const [step, setStep] = useState(1);
  const [showPasswords, setShowPasswords] = useState<{[key: string]: boolean}>({});
  const [testMode, setTestMode] = useState(true);
  const [config, setConfig] = useState<ConfigData>({
    stripePublishableKey: '',
    stripeSecretKey: '',
    stripeWebhookSecret: '',
    stripeRegularPriceId: '',
    stripeExtendedPriceId: '',
    adminPassword: '',
    emailService: 'none',
    sendgridApiKey: '',
    resendApiKey: '',
    emailFrom: 'noreply@perfexapi.com',
    databaseType: 'none',
    databaseUrl: '',
    googleAnalytics: '',
    plausibleDomain: '',
    perfexcrmUrl: '',
    perfexcrmApiKey: '',
  });
  
  const [saved, setSaved] = useState(false);
  const [testing, setTesting] = useState(false);
  const [testResults, setTestResults] = useState<{[key: string]: boolean}>({});

  // Load existing config if available
  useEffect(() => {
    const savedConfig = localStorage.getItem('perfexapi_config');
    if (savedConfig) {
      setConfig(JSON.parse(savedConfig));
    }
  }, []);

  const togglePasswordVisibility = (field: string) => {
    setShowPasswords(prev => ({ ...prev, [field]: !prev[field] }));
  };

  const updateConfig = (field: keyof ConfigData, value: string) => {
    setConfig(prev => ({ ...prev, [field]: value }));
  };

  const testStripeConnection = async () => {
    setTesting(true);
    setTestResults({});
    
    try {
      // Test publishable key format
      if (config.stripePublishableKey.startsWith('pk_')) {
        setTestResults(prev => ({ ...prev, publishableKey: true }));
      }
      
      // Test secret key format
      if (config.stripeSecretKey.startsWith('sk_')) {
        setTestResults(prev => ({ ...prev, secretKey: true }));
      }
      
      // Test webhook secret format
      if (config.stripeWebhookSecret.startsWith('whsec_')) {
        setTestResults(prev => ({ ...prev, webhookSecret: true }));
      }
      
      // Test price IDs format
      if (config.stripeRegularPriceId.startsWith('price_')) {
        setTestResults(prev => ({ ...prev, regularPrice: true }));
      }
      
      if (config.stripeExtendedPriceId.startsWith('price_')) {
        setTestResults(prev => ({ ...prev, extendedPrice: true }));
      }
      
      // Simulate API test
      setTimeout(() => {
        setTestResults(prev => ({ ...prev, apiConnection: true }));
        setTesting(false);
      }, 2000);
      
    } catch (error) {
      console.error('Test failed:', error);
      setTesting(false);
    }
  };

  const saveConfiguration = async () => {
    // Save to localStorage
    localStorage.setItem('perfexapi_config', JSON.stringify(config));
    
    // Generate .env content
    const envContent = generateEnvFile(config);
    
    // Create a blob and download
    const blob = new Blob([envContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = '.env.local';
    a.click();
    
    setSaved(true);
    setTimeout(() => setSaved(false), 3000);
  };

  const generateEnvFile = (config: ConfigData) => {
    return `# Generated by PerfexAPI Setup Wizard
# ${new Date().toISOString()}

# Base Configuration
NEXT_PUBLIC_BASE_URL=${window.location.origin}
NEXT_PUBLIC_TEST_MODE=${testMode}

# Stripe Configuration
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${config.stripePublishableKey}
STRIPE_SECRET_KEY=${config.stripeSecretKey}
STRIPE_WEBHOOK_SECRET=${config.stripeWebhookSecret}
NEXT_PUBLIC_STRIPE_REGULAR_PRICE_ID=${config.stripeRegularPriceId}
NEXT_PUBLIC_STRIPE_EXTENDED_PRICE_ID=${config.stripeExtendedPriceId}

# Admin Configuration
NEXT_PUBLIC_ADMIN_PASSWORD=${config.adminPassword}

# Email Service
${config.emailService === 'sendgrid' ? `SENDGRID_API_KEY=${config.sendgridApiKey}` : '# SENDGRID_API_KEY='}
${config.emailService === 'resend' ? `RESEND_API_KEY=${config.resendApiKey}` : '# RESEND_API_KEY='}
EMAIL_FROM=${config.emailFrom}

# Database
${config.databaseType !== 'none' ? `DATABASE_URL=${config.databaseUrl}` : '# DATABASE_URL='}

# Analytics
${config.googleAnalytics ? `NEXT_PUBLIC_GOOGLE_ANALYTICS=${config.googleAnalytics}` : '# NEXT_PUBLIC_GOOGLE_ANALYTICS='}
${config.plausibleDomain ? `NEXT_PUBLIC_PLAUSIBLE_DOMAIN=${config.plausibleDomain}` : '# NEXT_PUBLIC_PLAUSIBLE_DOMAIN='}

# PerfexCRM Integration
${config.perfexcrmUrl ? `PERFEXCRM_URL=${config.perfexcrmUrl}` : '# PERFEXCRM_URL='}
${config.perfexcrmApiKey ? `PERFEXCRM_API_KEY=${config.perfexcrmApiKey}` : '# PERFEXCRM_API_KEY='}
`;
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-3">
              <Settings className="w-8 h-8 text-primary-600" />
              <h1 className="text-2xl font-bold">PerfexAPI Setup Wizard</h1>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setTestMode(!testMode)}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  testMode 
                    ? 'bg-yellow-100 text-yellow-700' 
                    : 'bg-green-100 text-green-700'
                }`}
              >
                {testMode ? <TestTube className="w-4 h-4 inline mr-2" /> : <Rocket className="w-4 h-4 inline mr-2" />}
                {testMode ? 'Test Mode' : 'Live Mode'}
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Progress Bar */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            {[1, 2, 3, 4].map((s) => (
              <div
                key={s}
                className={`flex items-center ${s < 4 ? 'flex-1' : ''}`}
              >
                <div
                  className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${
                    step >= s
                      ? 'bg-primary-600 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                >
                  {step > s ? <Check className="w-5 h-5" /> : s}
                </div>
                {s < 4 && (
                  <div
                    className={`flex-1 h-1 mx-4 ${
                      step > s ? 'bg-primary-600' : 'bg-gray-200'
                    }`}
                  />
                )}
              </div>
            ))}
          </div>
          <div className="flex justify-between mt-2">
            <span className="text-sm">Stripe Setup</span>
            <span className="text-sm">Admin & Email</span>
            <span className="text-sm">Database & Analytics</span>
            <span className="text-sm">Review & Save</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <motion.div
          key={step}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.3 }}
        >
          {/* Step 1: Stripe Configuration */}
          {step === 1 && (
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="flex items-center mb-6">
                <CreditCard className="w-8 h-8 text-primary-600 mr-3" />
                <h2 className="text-2xl font-bold">Stripe Configuration</h2>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <div className="flex">
                  <Info className="w-5 h-5 text-blue-600 mt-0.5 mr-2" />
                  <div className="text-sm">
                    <p className="font-semibold mb-1">How to get your Stripe keys:</p>
                    <ol className="list-decimal list-inside space-y-1 text-gray-600">
                      <li>Go to <a href="https://dashboard.stripe.com/register" target="_blank" className="text-blue-600 hover:underline">Stripe Dashboard</a></li>
                      <li>Navigate to Developers â†’ API Keys</li>
                      <li>Copy your {testMode ? 'test' : 'live'} keys</li>
                      <li>Create products and copy price IDs</li>
                    </ol>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Publishable Key
                  </label>
                  <div className="relative">
                    <input
                      type={showPasswords.publishable ? 'text' : 'password'}
                      placeholder={testMode ? 'pk_test_...' : 'pk_live_...'}
                      value={config.stripePublishableKey}
                      onChange={(e) => updateConfig('stripePublishableKey', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <button
                      onClick={() => togglePasswordVisibility('publishable')}
                      className="absolute right-3 top-3.5 text-gray-500"
                    >
                      {showPasswords.publishable ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                    </button>
                  </div>
                  {testResults.publishableKey && <span className="text-green-600 text-sm">âœ“ Valid format</span>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Secret Key
                  </label>
                  <div className="relative">
                    <input
                      type={showPasswords.secret ? 'text' : 'password'}
                      placeholder={testMode ? 'sk_test_...' : 'sk_live_...'}
                      value={config.stripeSecretKey}
                      onChange={(e) => updateConfig('stripeSecretKey', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <button
                      onClick={() => togglePasswordVisibility('secret')}
                      className="absolute right-3 top-3.5 text-gray-500"
                    >
                      {showPasswords.secret ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                    </button>
                  </div>
                  {testResults.secretKey && <span className="text-green-600 text-sm">âœ“ Valid format</span>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Webhook Secret (optional for now)
                  </label>
                  <input
                    type="text"
                    placeholder="whsec_..."
                    value={config.stripeWebhookSecret}
                    onChange={(e) => updateConfig('stripeWebhookSecret', e.target.value)}
                    className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                  />
                  {testResults.webhookSecret && <span className="text-green-600 text-sm">âœ“ Valid format</span>}
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Regular License Price ID
                    </label>
                    <input
                      type="text"
                      placeholder="price_..."
                      value={config.stripeRegularPriceId}
                      onChange={(e) => updateConfig('stripeRegularPriceId', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <span className="text-sm text-gray-500">$89 product</span>
                    {testResults.regularPrice && <span className="text-green-600 text-sm block">âœ“ Valid format</span>}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Extended License Price ID
                    </label>
                    <input
                      type="text"
                      placeholder="price_..."
                      value={config.stripeExtendedPriceId}
                      onChange={(e) => updateConfig('stripeExtendedPriceId', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <span className="text-sm text-gray-500">$449 product</span>
                    {testResults.extendedPrice && <span className="text-green-600 text-sm block">âœ“ Valid format</span>}
                  </div>
                </div>

                <button
                  onClick={testStripeConnection}
                  disabled={testing}
                  className="px-6 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors"
                >
                  {testing ? 'Testing...' : 'Test Connection'}
                </button>
              </div>
            </div>
          )}

          {/* Step 2: Admin & Email */}
          {step === 2 && (
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="flex items-center mb-6">
                <Shield className="w-8 h-8 text-primary-600 mr-3" />
                <h2 className="text-2xl font-bold">Admin & Email Configuration</h2>
              </div>

              <div className="space-y-6">
                {/* Admin Password */}
                <div>
                  <h3 className="text-lg font-semibold mb-3">Admin Dashboard</h3>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Admin Password
                  </label>
                  <div className="relative">
                    <input
                      type={showPasswords.admin ? 'text' : 'password'}
                      placeholder="Enter a secure password"
                      value={config.adminPassword}
                      onChange={(e) => updateConfig('adminPassword', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <button
                      onClick={() => togglePasswordVisibility('admin')}
                      className="absolute right-3 top-3.5 text-gray-500"
                    >
                      {showPasswords.admin ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                    </button>
                  </div>
                  <p className="text-sm text-gray-500 mt-1">
                    This password protects your sales dashboard at /admin
                  </p>
                </div>

                {/* Email Service */}
                <div>
                  <h3 className="text-lg font-semibold mb-3">Email Service (Optional)</h3>
                  <div className="grid md:grid-cols-3 gap-3 mb-4">
                    <button
                      onClick={() => updateConfig('emailService', 'none')}
                      className={`p-3 border rounded-lg ${
                        config.emailService === 'none'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      No Email
                    </button>
                    <button
                      onClick={() => updateConfig('emailService', 'sendgrid')}
                      className={`p-3 border rounded-lg ${
                        config.emailService === 'sendgrid'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      SendGrid
                    </button>
                    <button
                      onClick={() => updateConfig('emailService', 'resend')}
                      className={`p-3 border rounded-lg ${
                        config.emailService === 'resend'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      Resend
                    </button>
                  </div>

                  {config.emailService === 'sendgrid' && (
                    <div className="space-y-3">
                      <input
                        type="password"
                        placeholder="SendGrid API Key"
                        value={config.sendgridApiKey}
                        onChange={(e) => updateConfig('sendgridApiKey', e.target.value)}
                        className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                      />
                    </div>
                  )}

                  {config.emailService === 'resend' && (
                    <div className="space-y-3">
                      <input
                        type="password"
                        placeholder="Resend API Key"
                        value={config.resendApiKey}
                        onChange={(e) => updateConfig('resendApiKey', e.target.value)}
                        className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                      />
                    </div>
                  )}

                  {config.emailService !== 'none' && (
                    <div className="mt-3">
                      <input
                        type="email"
                        placeholder="From Email Address"
                        value={config.emailFrom}
                        onChange={(e) => updateConfig('emailFrom', e.target.value)}
                        className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                      />
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Step 3: Database & Analytics */}
          {step === 3 && (
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="flex items-center mb-6">
                <Database className="w-8 h-8 text-primary-600 mr-3" />
                <h2 className="text-2xl font-bold">Database & Analytics (Optional)</h2>
              </div>

              <div className="space-y-6">
                {/* Database */}
                <div>
                  <h3 className="text-lg font-semibold mb-3">Database</h3>
                  <div className="grid md:grid-cols-4 gap-3 mb-4">
                    <button
                      onClick={() => updateConfig('databaseType', 'none')}
                      className={`p-3 border rounded-lg ${
                        config.databaseType === 'none'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      None
                    </button>
                    <button
                      onClick={() => updateConfig('databaseType', 'postgres')}
                      className={`p-3 border rounded-lg ${
                        config.databaseType === 'postgres'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      PostgreSQL
                    </button>
                    <button
                      onClick={() => updateConfig('databaseType', 'mysql')}
                      className={`p-3 border rounded-lg ${
                        config.databaseType === 'mysql'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      MySQL
                    </button>
                    <button
                      onClick={() => updateConfig('databaseType', 'sqlite')}
                      className={`p-3 border rounded-lg ${
                        config.databaseType === 'sqlite'
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200'
                      }`}
                    >
                      SQLite
                    </button>
                  </div>

                  {config.databaseType !== 'none' && (
                    <input
                      type="text"
                      placeholder="Database connection URL"
                      value={config.databaseUrl}
                      onChange={(e) => updateConfig('databaseUrl', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                  )}
                </div>

                {/* Analytics */}
                <div>
                  <h3 className="text-lg font-semibold mb-3">Analytics</h3>
                  <div className="space-y-3">
                    <input
                      type="text"
                      placeholder="Google Analytics ID (G-XXXXXXXXXX)"
                      value={config.googleAnalytics}
                      onChange={(e) => updateConfig('googleAnalytics', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <input
                      type="text"
                      placeholder="Plausible Domain (optional)"
                      value={config.plausibleDomain}
                      onChange={(e) => updateConfig('plausibleDomain', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                  </div>
                </div>

                {/* PerfexCRM Integration */}
                <div>
                  <h3 className="text-lg font-semibold mb-3">PerfexCRM Integration</h3>
                  <div className="space-y-3">
                    <input
                      type="url"
                      placeholder="PerfexCRM URL (https://your-crm.com)"
                      value={config.perfexcrmUrl}
                      onChange={(e) => updateConfig('perfexcrmUrl', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                    <input
                      type="text"
                      placeholder="PerfexCRM API Key (pk_...)"
                      value={config.perfexcrmApiKey}
                      onChange={(e) => updateConfig('perfexcrmApiKey', e.target.value)}
                      className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:border-primary-500"
                    />
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Step 4: Review & Save */}
          {step === 4 && (
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="flex items-center mb-6">
                <Check className="w-8 h-8 text-green-600 mr-3" />
                <h2 className="text-2xl font-bold">Review & Save Configuration</h2>
              </div>

              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <div className="flex">
                  <Check className="w-5 h-5 text-green-600 mt-0.5 mr-2" />
                  <div>
                    <p className="font-semibold mb-1">Configuration Complete!</p>
                    <p className="text-sm text-gray-600">
                      Review your settings below and click "Generate .env File" to download your configuration.
                    </p>
                  </div>
                </div>
              </div>

              <div className="space-y-4 mb-6">
                <div className="border rounded-lg p-4">
                  <h3 className="font-semibold mb-2">Stripe</h3>
                  <div className="grid md:grid-cols-2 gap-2 text-sm">
                    <div>Mode: {testMode ? 'Test' : 'Live'}</div>
                    <div>Publishable Key: {config.stripePublishableKey ? 'âœ“ Set' : 'âœ— Not set'}</div>
                    <div>Secret Key: {config.stripeSecretKey ? 'âœ“ Set' : 'âœ— Not set'}</div>
                    <div>Products: {config.stripeRegularPriceId && config.stripeExtendedPriceId ? 'âœ“ Set' : 'âœ— Not set'}</div>
                  </div>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="font-semibold mb-2">Admin & Email</h3>
                  <div className="grid md:grid-cols-2 gap-2 text-sm">
                    <div>Admin Password: {config.adminPassword ? 'âœ“ Set' : 'âœ— Not set'}</div>
                    <div>Email Service: {config.emailService}</div>
                  </div>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="font-semibold mb-2">Optional Services</h3>
                  <div className="grid md:grid-cols-2 gap-2 text-sm">
                    <div>Database: {config.databaseType}</div>
                    <div>Analytics: {config.googleAnalytics ? 'Configured' : 'Not configured'}</div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <h3 className="font-semibold mb-2">Next Steps:</h3>
                <ol className="list-decimal list-inside space-y-1 text-sm">
                  <li>Click "Generate .env File" below</li>
                  <li>Move the downloaded file to your website root directory</li>
                  <li>Rename it from .env.local to .env.local (if needed)</li>
                  <li>Run <code className="bg-gray-200 px-1 rounded">npm run dev</code> to start your website</li>
                </ol>
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={saveConfiguration}
                  className="px-8 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg font-semibold hover:shadow-lg transition-all duration-300"
                >
                  <Save className="w-5 h-5 inline mr-2" />
                  Generate .env File
                </button>
                
                <button
                  onClick={() => {
                    const envContent = generateEnvFile(config);
                    copyToClipboard(envContent);
                  }}
                  className="px-6 py-3 bg-gray-100 text-gray-700 rounded-lg font-semibold hover:bg-gray-200 transition-colors"
                >
                  <Copy className="w-5 h-5 inline mr-2" />
                  Copy to Clipboard
                </button>
              </div>

              {saved && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-4 text-green-600 font-semibold"
                >
                  âœ“ Configuration saved and .env file downloaded!
                </motion.div>
              )}
            </div>
          )}
        </motion.div>

        {/* Navigation Buttons */}
        <div className="flex justify-between mt-8">
          <button
            onClick={() => setStep(Math.max(1, step - 1))}
            disabled={step === 1}
            className={`px-6 py-3 rounded-lg font-semibold transition-colors ${
              step === 1
                ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
            }`}
          >
            Previous
          </button>

          {step < 4 ? (
            <button
              onClick={() => setStep(Math.min(4, step + 1))}
              className="px-6 py-3 bg-primary-600 text-white rounded-lg font-semibold hover:bg-primary-700 transition-colors"
            >
              Next Step
            </button>
          ) : (
            <a
              href="/"
              className="px-6 py-3 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition-colors"
            >
              Go to Website
            </a>
          )}
        </div>
      </main>
    </div>
  );
}